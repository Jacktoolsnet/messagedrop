// tools/gen-version.js
const { execSync } = require('child_process');
const { writeFileSync, mkdirSync } = require('fs');
const { resolve, dirname } = require('path');
const pkg = require('../package.json');

function safe(cmd, fallback = '') {
    try { return execSync(cmd, { stdio: ['ignore', 'pipe', 'ignore'] }).toString().trim(); }
    catch { return fallback; }
}

// CI-Buildnummern oder Fallbacks:
const runNumber =
    process.env.GITHUB_RUN_NUMBER ||
    process.env.CI_PIPELINE_IID ||
    process.env.BUILD_NUMBER ||
    ''; // leer, wenn lokal

// Fallback: Anzahl Commits als „Build“
const commitCount = safe('git rev-list --count HEAD', '0');
const sha = safe('git rev-parse --short HEAD', 'local');
const now = new Date();

// YYYYMMDDHHmm
const ts =
    now.getFullYear().toString() +
    String(now.getMonth() + 1).padStart(2, '0') +
    String(now.getDate()).padStart(2, '0') +
    String(now.getHours()).padStart(2, '0') +
    String(now.getMinutes()).padStart(2, '0');

const build = runNumber || commitCount;
const versionReadable = `${pkg.version}+${ts}.${build}.${sha}`;

const content =
    `// AUTO-GENERATED by tools/gen-version.js – do not edit
export const APP_VERSION_INFO = {
  semver: '${pkg.version}',
  build: ${Number(build) || 0},
  timestamp: '${ts}',
  commit: '${sha}',
  version: '${versionReadable}'
} as const;
`;

const outFile = resolve(__dirname, '../src/environments/version.ts');
mkdirSync(dirname(outFile), { recursive: true });
writeFileSync(outFile, content);
console.log('Generated', outFile, '→', versionReadable);